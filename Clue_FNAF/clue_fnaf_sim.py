import tkinter as tk
import random

# =====================
# Datos del juego: personajes, locaciones, armas e historias finales
# =====================
personajes = [
    ("Freddy Fazbear", "Animatr√≥nico cantante"),
    ("Bonnie", "Guitarrista animatr√≥nico"),
    ("Chica", "Cocinera de la pizzer√≠a"),
    ("Foxy", "Pirata del escenario"),
    ("Security Mike", "Guardia nocturno")
]

locaciones = ["Escenario Principal", "Cocina", "Cuarto de Seguridad", "Pasillo Oeste", "Sala de Mantenimiento"]
armas = ["Micr√≥fono roto", "Guitarra el√©ctrica", "Bandeja met√°lica", "Garra oxidada", "Linterna descargada"]

# Historias finales correspondientes a cada personaje culpable
historias = {
    "Freddy Fazbear": "Freddy se descontrol√≥ cuando las luces parpadearon. El eco met√°lico de su micr√≥fono roto marc√≥ el fin de la calma...",
    "Bonnie": "Bonnie desapareci√≥ del escenario, y minutos despu√©s, un chillido y una cuerda de guitarra rota revelaron la tragedia...",
    "Chica": "El olor a aceite quemado y pizza invadi√≥ el aire. Chica estaba all√≠, sosteniendo una bandeja cubierta de algo m√°s que salsa...",
    "Foxy": "Desde el corredor oscuro, un grito y el sonido de metal raspando el suelo. Foxy no perdon√≥ esa noche...",
    "Security Mike": "El guardia no resisti√≥ m√°s. Entre la locura y el miedo, us√≥ la linterna como su √∫nica defensa... que termin√≥ siendo mortal."
}

# =====================
# Funci√≥n para generar un nuevo caso aleatorio
# =====================
def nuevo_caso():
    return {
        "culpable": random.choice(personajes),  # Selecciona un culpable aleatorio
        "lugar": random.choice(locaciones),     # Selecciona un lugar aleatorio
        "arma": random.choice(armas)           # Selecciona un arma aleatoria
    }

# =====================
# Clase principal del juego con GUI
# =====================
class ClueFNAF:
    def __init__(self, root):
        self.root = root
        self.root.title("üéÉ Clue: FNAF Mystery Edition üéÉ")
        self.root.geometry("750x650")
        self.root.config(bg="#111")

        # Generar el caso inicial
        self.caso = nuevo_caso()
        self.intentos = 0  # Contador de intentos de adivinanza
        self.pistas = 0     # Contador de pistas pedidas

        # T√≠tulo principal del juego
        titulo = tk.Label(root, text="üïØÔ∏è Misterio en Freddy Fazbear‚Äôs Pizza üïØÔ∏è", font=("Arial", 18, "bold"), bg="#111", fg="#ffcc00")
        titulo.pack(pady=15)

        # Texto de la narrativa inicial (pr√≥logo aleatorio)
        self.texto_historia = tk.Label(root, text=self.generar_prologo(), wraplength=700, justify="center", bg="#111", fg="white", font=("Arial", 11))
        self.texto_historia.pack(pady=10)

        # Frame para selecci√≥n de sospechoso, lugar y arma
        frame_seleccion = tk.Frame(root, bg="#111")
        frame_seleccion.pack(pady=10)

        # Selecci√≥n de personaje sospechoso
        tk.Label(frame_seleccion, text="Sospechoso:", bg="#111", fg="#ffcc00", font=("Arial", 12, "bold")).grid(row=0, column=0, padx=5)
        self.sospechoso_var = tk.StringVar(value=personajes[0][0])
        tk.OptionMenu(frame_seleccion, self.sospechoso_var, *[p[0] for p in personajes]).grid(row=0, column=1)

        # Selecci√≥n de locaci√≥n
        tk.Label(frame_seleccion, text="Lugar:", bg="#111", fg="#ffcc00", font=("Arial", 12, "bold")).grid(row=1, column=0, padx=5)
        self.lugar_var = tk.StringVar(value=locaciones[0])
        tk.OptionMenu(frame_seleccion, self.lugar_var, *locaciones).grid(row=1, column=1)

        # Selecci√≥n de arma
        tk.Label(frame_seleccion, text="Arma:", bg="#111", fg="#ffcc00", font=("Arial", 12, "bold")).grid(row=2, column=0, padx=5)
        self.arma_var = tk.StringVar(value=armas[0])
        tk.OptionMenu(frame_seleccion, self.arma_var, *armas).grid(row=2, column=1)

        # Frame para botones de acci√≥n
        frame_botones = tk.Frame(root, bg="#111")
        frame_botones.pack(pady=15)

        # Bot√≥n para adivinar
        tk.Button(frame_botones, text="üéØ Adivinar", command=self.adivinar, bg="#ff4444", fg="white", font=("Arial", 12, "bold"), width=12).grid(row=0, column=0, padx=5)
        # Bot√≥n para pedir pista
        tk.Button(frame_botones, text="üîç Pedir pista", command=self.dar_pista, bg="#ffaa00", fg="black", font=("Arial", 12, "bold"), width=12).grid(row=0, column=1, padx=5)
        # Bot√≥n para reiniciar el juego
        tk.Button(frame_botones, text="üîÅ Reiniciar", command=self.reiniciar, bg="#33aa33", fg="white", font=("Arial", 12, "bold"), width=12).grid(row=0, column=2, padx=5)
        # Bot√≥n para salir del juego
        tk.Button(frame_botones, text="üö™ Salir", command=root.destroy, bg="#555", fg="white", font=("Arial", 12, "bold"), width=12).grid(row=0, column=3, padx=5)

        # Label para mostrar pistas o resultado final
        self.resultado_label = tk.Label(root, text="", bg="#111", fg="#ccc", font=("Arial", 12), wraplength=700, justify="center")
        self.resultado_label.pack(pady=15)

    # Generar una narrativa introductoria aleatoria
    def generar_prologo(self):
        introducciones = [
            "La noche cay√≥ sobre la pizzer√≠a. Los animatr√≥nicos estaban inquietos, y algo oscuro se mov√≠a entre los pasillos...",
            "Luces parpadeantes, c√°maras sin se√±al y un silencio inquietante. Algo terrible ocurri√≥ en Freddy Fazbear‚Äôs Pizza...",
            "El reloj marc√≥ la medianoche. Los monitores mostraron sombras que no deber√≠an estar all√≠...",
            "Un olor met√°lico y una risa distorsionada llenaron el aire. Solo t√∫ puedes descubrir qu√© pas√≥ esta vez...",
            "La pizzer√≠a cerr√≥ hace a√±os, pero esta noche, todo volvi√≥ a la vida... y a la muerte."
        ]
        return random.choice(introducciones)

    # Dar una pista al jugador (m√°x. 3 pistas)
    def dar_pista(self):
        if self.pistas >= 3:
            self.resultado_label.config(text="Ya no hay m√°s pistas disponibles.")
            return

        pistas_texto = [
            f"Alguien vio una figura parecida a {self.caso['culpable'][0]} cerca del {random.choice(locaciones)}...",
            f"Se escuch√≥ un ruido proveniente del {self.caso['lugar']}. Algo met√°lico choc√≥ contra el suelo...",
            f"Una sombra sosten√≠a lo que parec√≠a ser un(a) {self.caso['arma']}. La escena se vuelve m√°s clara..."
        ]
        pista = pistas_texto[self.pistas]
        self.resultado_label.config(text=pista)
        self.pistas += 1

    # Verificar si la adivinanza es correcta
    def adivinar(self):
        self.intentos += 1
        sospechoso = self.sospechoso_var.get()
        lugar = self.lugar_var.get()
        arma = self.arma_var.get()

        if (sospechoso == self.caso["culpable"][0] and lugar == self.caso["lugar"] and arma == self.caso["arma"]):
            historia = historias[self.caso["culpable"][0]]
            self.resultado_label.config(fg="#00ff88", text=f"‚úÖ ¬°Correcto! Has resuelto el caso tras {self.intentos} intentos.\n\n{historia}")
        else:
            self.resultado_label.config(fg="#ff6666", text=f"‚ùå No es correcto. Intenta de nuevo...")

    # Reiniciar el juego generando un nuevo caso y reiniciando contadores
    def reiniciar(self):
        self.caso = nuevo_caso()
        self.intentos = 0
        self.pistas = 0
        self.resultado_label.config(text="")
        self.texto_historia.config(text=self.generar_prologo())


# =====================
# Ejecutar la aplicaci√≥n
# =====================
if __name__ == "__main__":
    root = tk.Tk()
    app = ClueFNAF(root)
    root.mainloop()